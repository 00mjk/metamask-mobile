// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Browser should render correctly 1`] = `
<ErrorBoundary
  view="BrowserTab"
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "hsla(0, 0%, 100%, 1)",
          "flex": 1,
        },
        false,
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
          "zIndex": 1,
        }
      }
    />
    <View
      style={
        Object {
          "height": 3,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
          "zIndex": 999999,
        }
      }
    >
      <WebviewProgressBar
        progress={0}
      />
    </View>
    <ReactNativeModal
      animationIn="slideInUp"
      animationInTiming={300}
      animationOut="slideOutDown"
      animationOutTiming={300}
      avoidKeyboard={false}
      backdropColor="hsla(354, 66%, 54%, 1)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      panResponderThreshold={4}
      propagateSwipe={false}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "flex": 1,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      useNativeDriver={true}
    >
      <PhishingModal
        continueToPhishingSite={[Function]}
        goBackToSafety={[Function]}
        goToETHPhishingDetector={[Function]}
        goToEtherscam={[Function]}
        goToFilePhishingIssue={[Function]}
      />
    </ReactNativeModal>
    <ReactNativeModal
      animationIn="slideInDown"
      animationInTiming={300}
      animationOut="slideOutUp"
      animationOutTiming={300}
      avoidKeyboard={false}
      backdropColor="hsla(0, 0%, 0%, .6)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      panResponderThreshold={4}
      propagateSwipe={false}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "justifyContent": "flex-start",
          "margin": 0,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      useNativeDriver={true}
    >
      <View
        style={
          Object {
            "backgroundColor": "hsla(0, 0%, 100%, 1)",
            "flexDirection": "row",
            "height": 87,
            "paddingHorizontal": 10,
            "paddingTop": 50,
          }
        }
        testID="url-modal"
      >
        <View
          style={
            Object {
              "backgroundColor": "hsla(210, 18%, 96%, 1)",
              "borderRadius": 30,
              "flex": 1,
              "flexDirection": "row",
              "height": 30,
            }
          }
        >
          <TextInput
            autoCapitalize="none"
            autoCorrect={false}
            keyboardType="web-search"
            onChangeText={[Function]}
            onSubmitEditing={[Function]}
            placeholder="Search or Type URL"
            placeholderTextColor="hsla(210, 8%, 75%, 1)"
            returnKeyType="go"
            selectTextOnFocus={true}
            style={
              Object {
                "color": "hsla(210, 8%, 15%, 1)",
                "flex": 1,
                "fontFamily": "EuclidCircularB-Regular",
                "fontSize": 14,
                "fontWeight": "400",
                "paddingLeft": 15,
              }
            }
            testID="url-input"
            value=""
          />
        </View>
        <TouchableOpacity
          onPress={[Function]}
          style={
            Object {
              "justifyContent": "center",
              "marginLeft": 10,
              "marginTop": -6,
            }
          }
          testID="cancel-url-button"
        >
          <Text
            style={
              Object {
                "color": "hsla(205, 97%, 43%, 1)",
                "fontFamily": "EuclidCircularB-Regular",
                "fontSize": 14,
                "fontWeight": "400",
              }
            }
          >
            Cancel
          </Text>
        </TouchableOpacity>
      </View>
      <Connect(UrlAutocomplete)
        input=""
        onDismiss={[Function]}
        onSubmit={[Function]}
      />
    </ReactNativeModal>
    <ReactNativeModal
      animationIn="slideInUp"
      animationInTiming={300}
      animationOut="slideOutDown"
      animationOutTiming={300}
      avoidKeyboard={false}
      backdropColor="hsla(0, 0%, 0%, .6)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onSwipeComplete={[Function]}
      panResponderThreshold={4}
      propagateSwipe={false}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "justifyContent": "flex-end",
          "margin": 0,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <Connect(AccountApproval)
        currentPageInformation={
          Object {
            "icon": null,
            "title": "",
            "url": "",
          }
        }
        onCancel={[Function]}
        onConfirm={[Function]}
      />
    </ReactNativeModal>
    <ReactNativeModal
      animationIn="slideInUp"
      animationInTiming={600}
      animationOut="slideOutDown"
      animationOutTiming={600}
      avoidKeyboard={false}
      backdropColor="hsla(0, 0%, 0%, .6)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onSwipeComplete={[Function]}
      panResponderThreshold={4}
      propagateSwipe={true}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "justifyContent": "flex-end",
          "margin": 0,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <Connect(WatchAssetRequest)
        currentPageInformation={
          Object {
            "icon": null,
            "title": "",
            "url": "",
          }
        }
        onCancel={[Function]}
        onConfirm={[Function]}
      />
    </ReactNativeModal>
    <BrowserBottomBar
      canGoBack={false}
      canGoForward={false}
      goBack={[Function]}
      goForward={[Function]}
      goHome={[Function]}
      showTabs={[Function]}
      showUrlModal={[Function]}
      toggleOptions={[Function]}
    />
    <ReactNativeModal
      animationIn="slideInUp"
      animationInTiming={300}
      animationOut="slideOutDown"
      animationOutTiming={300}
      avoidKeyboard={false}
      backdropColor="hsla(0, 0%, 0%, .6)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onSwipeComplete={[Function]}
      panResponderThreshold={4}
      propagateSwipe={false}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "justifyContent": "flex-end",
          "margin": 0,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <AddCustomNetwork
        currentPageInformation={
          Object {
            "icon": null,
            "title": "",
            "url": "",
          }
        }
        customNetworkInformation={null}
        onCancel={[Function]}
        onConfirm={[Function]}
      />
    </ReactNativeModal>
    <ReactNativeModal
      animationIn="slideInUp"
      animationInTiming={300}
      animationOut="slideOutDown"
      animationOutTiming={300}
      avoidKeyboard={false}
      backdropColor="hsla(0, 0%, 0%, .6)"
      backdropOpacity={1}
      backdropTransitionInTiming={300}
      backdropTransitionOutTiming={300}
      coverScreen={true}
      customBackdrop={null}
      deviceHeight={null}
      deviceWidth={null}
      hasBackdrop={true}
      hideModalContentWhileAnimating={false}
      isVisible={false}
      onBackButtonPress={[Function]}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalShow={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onSwipeComplete={[Function]}
      panResponderThreshold={4}
      propagateSwipe={false}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "justifyContent": "flex-end",
          "margin": 0,
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeDirection="down"
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <SwitchCustomNetwork
        currentPageInformation={
          Object {
            "icon": null,
            "title": "",
            "url": "",
          }
        }
        customNetworkInformation={null}
        onCancel={[Function]}
        onConfirm={[Function]}
      />
    </ReactNativeModal>
  </View>
</ErrorBoundary>
`;
